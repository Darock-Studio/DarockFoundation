// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64_32-apple-watchos9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DarockFoundation
import Alamofire
import CommonCrypto
@_exported import DarockFoundation
import Foundation
import Swift
import SwiftUI
import SwiftyJSON
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.String {
  public func apiFixed(_ fixType: DarockFoundation.ApiFixType = .server) -> Swift.String
  @inlinable public func urlEncoded() -> Swift.String {
        let encodeUrlString = self.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)
        return encodeUrlString ?? ""
    }
  @inlinable public func urlDecoded() -> Swift.String {
        return self.removingPercentEncoding ?? self
    }
  @inlinable public func compatibleUrlEncoded() -> Swift.String {
        if #available(watchOS 10.0, *) {
            return self
        } else {
            return self.urlEncoded()
        }
    }
  public func base64Decoded() -> Swift.String?
  public func base64Encoded() -> Swift.String
  public var md5: Swift.String {
    get
  }
  public subscript(rhs: Swift.Int) -> Swift.Character {
    get
  }
}
extension SwiftUICore.Color {
  public init(hex: Swift.Int, alpha: Swift.Double = 1)
}
@frozen public enum ApiFixType {
  case client
  case server
  public static func == (a: DarockFoundation.ApiFixType, b: DarockFoundation.ApiFixType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func jsonString<T>(from value: T) -> Swift.String? where T : Swift.Encodable
public func getJsonData<T>(_ type: T.Type, from json: Swift.String) -> T? where T : Swift.Decodable
extension Swift.Array {
  @inlinable public subscript(from index: Swift.Int) -> Element? {
    get {
        return self.indices ~= index ? self[index] : nil
    }
  }
}
postfix operator ++
postfix operator --
prefix operator ++
prefix operator --
extension Swift.Int {
  @discardableResult
  @inline(__always) postfix public static func ++ (num: inout Swift.Int) -> Swift.Int
  @discardableResult
  @inline(__always) postfix public static func -- (num: inout Swift.Int) -> Swift.Int
  @discardableResult
  @inline(__always) prefix public static func ++ (num: inout Swift.Int) -> Swift.Int
  @discardableResult
  @inline(__always) prefix public static func -- (num: inout Swift.Int) -> Swift.Int
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Bool : @retroactive Swift.ExpressibleByIntegerLiteral {
  @_transparent public init(_ intLiteral: Swift.Int) {
        self = intLiteral != 0
    }
  @_transparent public init(integerLiteral value: Swift.IntegerLiteralType) {
        self.init(value)
    }
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
#else
extension Swift.Bool : Swift.ExpressibleByIntegerLiteral {
  @_transparent public init(_ intLiteral: Swift.Int) {
        self = intLiteral != 0
    }
  @_transparent public init(integerLiteral value: Swift.IntegerLiteralType) {
        self.init(value)
    }
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int : @retroactive Swift.ExpressibleByBooleanLiteral {
  @_transparent public init(_ boolLiteral: Swift.Bool) {
        self = boolLiteral ? 1 : 0
    }
  @_transparent public init(booleanLiteral value: Swift.BooleanLiteralType) {
        self.init(value)
    }
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
#else
extension Swift.Int : Swift.ExpressibleByBooleanLiteral {
  @_transparent public init(_ boolLiteral: Swift.Bool) {
        self = boolLiteral ? 1 : 0
    }
  @_transparent public init(booleanLiteral value: Swift.BooleanLiteralType) {
        self.init(value)
    }
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
#endif
infix operator ~ : DefaultPrecedence
extension Swift.Float {
  @inlinable public static func ~ (lhs: Swift.Float, rhs: Swift.Int) -> Swift.String {
        return String(format: "%.\(rhs)f", lhs)
    }
}
extension Swift.Double {
  @inlinable public static func ~ (lhs: Swift.Double, rhs: Swift.Int) -> Swift.String {
        return String(format: "%.\(rhs)f", lhs)
    }
}
prefix operator &&
@inlinable prefix public func && <T>(input: inout T) -> Swift.UnsafeMutablePointer<T> {
    withUnsafeMutablePointer(to: &input) { $0 }
}
prefix operator *
@inlinable prefix public func * <T>(ptr: Swift.UnsafeMutablePointer<T>) -> T {
    return ptr.pointee
}
@inlinable prefix public func * <T>(ptr: Swift.UnsafePointer<T>) -> T {
    return ptr.pointee
}
infix operator =! : DefaultPrecedence
@discardableResult
@inlinable public func =! <T>(lhs: inout T, rhs: T) -> T {
    lhs = rhs
    return lhs
}
extension Foundation.Date {
  public func formatted(by format: Swift.String) -> Swift.String
  public func formatted(dateStyle: Foundation.DateFormatter.Style = .medium, timeStyle: Foundation.DateFormatter.Style = .medium) -> Swift.String
  public func formatted(byModifiedFormatter modifying: (Foundation.DateFormatter) -> Swift.Void) -> Swift.String
  public func components(from calendar: Foundation.Calendar = .autoupdatingCurrent) -> Foundation.DateComponents
}
@_hasMissingDesignatedInitializers public class DarockKit {
  @_hasMissingDesignatedInitializers @available(*, deprecated, message: "'DarockKit.Network' has deprecated in DarockFoundation. Use top-level functions instead.")
  public class Network {
    public static let shared: DarockFoundation.DarockKit.Network
    @discardableResult
    open func request(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil) -> Alamofire.DataRequest
    open func requestJSON(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil, callback: @escaping ((SwiftyJSON.JSON, Swift.Bool) -> Swift.Void))
    open func requestString(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil, callback: @escaping ((Swift.String, Swift.Bool) -> Swift.Void))
    open func requestJSON(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil) async -> DarockFoundation.Result<SwiftyJSON.JSON, Swift.Void>
    open func requestString(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil) async -> DarockFoundation.Result<Swift.String, Swift.Void>
    @objc deinit
  }
  @objc deinit
}
public func requestJSON(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil, callback: @escaping ((SwiftyJSON.JSON, Swift.Bool) -> Swift.Void))
public func requestString(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil, callback: @escaping ((Swift.String, Swift.Bool) -> Swift.Void))
public func requestJSON(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil) async -> DarockFoundation.Result<SwiftyJSON.JSON, Swift.Void>
public func requestString(_ convertible: any Alamofire.URLConvertible, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, requestModifier: Alamofire.Session.RequestModifier? = nil) async -> DarockFoundation.Result<Swift.String, Swift.Void>
public func requestAPI(_ endpoint: Swift.String, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, callback: @escaping ((Swift.String, Swift.Bool) -> Swift.Void))
@inlinable public func requestAPI(_ endpoint: Swift.String..., method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, callback: @escaping ((Swift.String, Swift.Bool) -> Swift.Void)) {
    requestAPI(endpoint.joined(separator: "/"), method: method, parameters: parameters, encoding: encoding, headers: headers, interceptor: interceptor, callback: callback)
}
public func requestAPI(_ endpoint: Swift.String, method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil) async -> DarockFoundation.Result<Swift.String, Swift.Void>
@inlinable public func requestAPI(_ endpoint: Swift.String..., method: Alamofire.HTTPMethod = .get, parameters: Alamofire.Parameters? = nil, encoding: any Alamofire.ParameterEncoding = URLEncoding.default, headers: Alamofire.HTTPHeaders? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil) async -> DarockFoundation.Result<Swift.String, Swift.Void> {
    await requestAPI(endpoint.joined(separator: "/"), method: method, parameters: parameters, encoding: encoding, headers: headers, interceptor: interceptor)
}
@frozen public enum Result<Success, Failure> {
  case success(Success)
  case failure(Failure)
}
extension DarockFoundation.ApiFixType : Swift.Equatable {}
extension DarockFoundation.ApiFixType : Swift.Hashable {}
extension DarockFoundation.ApiFixType : Swift.Sendable {}
extension DarockFoundation.ApiFixType : Swift.BitwiseCopyable {}
